<?php
require_once(__DIR__ . DIRECTORY_SEPARATOR . '../../setup.php');
require_once(LIB_FACEBOOK_PATH . DIRECTORY_SEPARATOR . 'LibFacebook.php');
require_once(LIB_FACEBOOK_PATH . DIRECTORY_SEPARATOR . 'lib/Connection/User.php');

/**
 * Test class for LibFacebook.
 * Generated by PHPUnit on 2012-04-15 at 19:29:07.
 */
class LibFacebook_Connection_UserTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var array
     */
    protected $userData = array();

    /**
     * @var LibFacebook_Connection_User
     */
    protected $user;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $json = file_get_contents(LIB_FACEBOOK_TEST_PATH . DIRECTORY_SEPARATOR . 'data/userdata.txt');
        $this->userData = json_decode(utf8_encode($json), false);

        $this->user = LibFacebook::getInstance()->getUser(USER_ID);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers LibFacebook::getUser
     */
    public function testConstructNewUserWithValidData()
    {
        $object = new LibFacebook_Connection_User($this->userData);
        $this->assertInstanceOf('LibFacebook_Connection_User', $object);
    }

    /**
     * @covers LibFacebook::getAlbums
     */
    public function testGetAlbumsReturnsCollection()
    {
        $albums = $this->user->getAlbums();

        $this->assertInstanceOf('LibFacebook_Collection_Abstract', $albums);

    }

    /**
     * @covers LibFacebook::getAlbums
     */
    public function testGetAlbumsReturnsCollectionOfAlbumConnections()
    {
        $albums = $this->user->getAlbums();

        /** @var $album LibFacebook_Connection_Album */

        foreach ($albums as $album) {
            $this->assertTrue(class_exists('LibFacebook_Connection_Album'));
            $this->assertInstanceOf('LibFacebook_Connection_Album', $album);
        }
    }

    /**
     * @covers LibFacebook::getAlbums
     */
    public function testGetAlbumsAlbumGetOwnerDoesntCreateNewUserConnection()
    {
        $albums = $this->user->getAlbums();

        $this->assertEquals(spl_object_hash($this->user), spl_object_hash($albums[0]->getOwner()));

    }


    /**
     * @covers LibFacebook::getAlbums
     */
    public function testGetAlbumsAlwaysReturnsSameObject()
    {
        $albums = $this->user->getAlbums();

        $this->assertEquals(spl_object_hash($albums), spl_object_hash($this->user->getAlbums()));
    }


    /**
     * @covers LibFacebook::getFeed
     */
    public function testGetFeedReturnsCollection()
    {
        $feed = $this->user->getFeed();

        $this->assertInstanceOf('LibFacebook_Collection_Abstract', $feed);

    }


    /**
     * @covers LibFacebook::getFeed
     */
    public function testGetFeedReturnsCollectionOfConnections()
    {
        $feed = $this->user->getFeed();

        foreach ($feed as $feed_item) {
            $this->assertInstanceOf('LibFacebook_Connection_Abstract', $feed_item);
        }
    }

    /**
     * @covers LibFacebook::getPermissions
     */
    public function testGetPermissions()
    {
        $this->assertTrue(is_object($this->user->getPermissions()));
        $this->assertGreaterThan(0, count($this->user->getPermissions()));
    }

    /**
     * @covers LibFacebook::getPermissions
     */
    public function testGetPermissionsReturnsFalse()
    {
        $friends = $this->user->getFriends();

        $friendData = $friends->current();

        $friend = LibFacebook::getInstance()->getUser($friendData->id);

        $this->assertFalse($friend->getPermissions());
    }
}
?>
